/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "keymap_italian.h"

// Layer definitions
#define BASE 0
#define SYM 1
#define EXT 2
#define FNC 3
#define SYM2 4
#define ACCENT 5
#define SETTINGS 6
// -----------------

&sk {
	// don't release mods on other mods presses
	ignore-modifiers;
};


/ {
	behaviors {
		// Enables holding the first mod-tap key
		// by performing a tap-release-hold sequence.
		// To use it: "&qt KEYCODE1 KEYCODE2"
		qt: quick_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "QUICK_TAP";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
		};
	};

	macros {
		// sometimes my device thinks a modifier is being held down
		// pressing all modifiers fixes it.
		unstick: unstick {
			label = "ZM_unstick";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
		};
	};

	// key-positions = <31 33>; // internal-left & external-right thumb keys
	// key-positions = <30 31>; // both left thumb keys
	// key-positions = <32 33>; // both right thumb keys
	// key-positions = <12 13>; // left index & middle fingers (home-row)

	combos {
		compatible = "zmk,combos";
		
		// combo_accent {
		// 	timeout-ms = <200>;
		// 	key-positions = <30 31>; // both left thumb keys
		// 	bindings = <&mo ACCENT>;
		// };
		
		combo_sym2 {
			timeout-ms = <200>;
			key-positions = <32 33>; // both right thumb keys
			bindings = <&mo SYM2>;
		};

		 combo_settings {
		 	timeout-ms = <200>;
		 	key-positions = <30 31>; // both left thumb keys
		 	bindings = <&mo SETTINGS>;
		 };

		// left index & middle fingers (home-row)
		// hold control & space for Adobe workflow
		combo_ctrl_space {
			timeout-ms = <200>;
			key-positions = <12 13>; // left index & middle fingers (home-row)
			bindings = <&kp LC(SPACE)>;
			layers = <BASE>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		// Base alpha layer
		default_layer {
			label = "Base";
			bindings = <
			&kp Q &kp W &kp E 	&kp R 	&kp T           &kp Y 		&kp U  	&kp I     &kp O   	&kp P 
			&kp A &kp S &kp D 	&kp F 	&kp G           &kp H 		&kp J  	&kp K     &kp L 	&kp MINUS
			&kp Z &kp X &kp C 	&kp V 	&kp B           &kp N 		&kp M  	&kp COMMA &kp DOT 	&kp SEMICOLON
								&mo EXT &kp LSHIFT      &kp SPACE 	&sl SYM
			>;
		};

		// Numbers and high frequency symbols
		sym_layer {
			label = "Sym 1";
			bindings = <
			&kp N1 			&kp N2 			&kp N3 		&kp N4 			&kp N5		                &kp N6 		&kp N7 				&kp N8 				&kp N9 			&kp N0
			&kp GRAVE 		&kp TILDE		&kp LPAR 	&kp LEFT_BRACE 	&kp LEFT_BRACKET	  		&kp EQUAL 	&kp QUESTION 		&kp SINGLE_QUOTE 	&kp ASTERISK 	&kp BACKSLASH
			&kp PIPE	 	&kp AMPERSAND 	&kp RPAR 	&kp RIGHT_BRACE &kp RIGHT_BRACKET 			&kp AT_SIGN &kp EXCLAMATION 	&kp DOUBLE_QUOTES 	&kp PLUS 		&kp SLASH
														&mo FNC  		&mo SYM2      	 			&trans 		&trans
			>;
		};

		// Main modifiers and arrow keys
		ext_layer {
			label = "Ext";
			bindings = <
			&kp ESC  		&kp LG(W)		&kp LG(E)		&kp LG(R) 	&kp LG(T) 				&kp LG(BSPC)	&kp LC(A) 	&kp PG_DN 	&kp PG_UP 	&kp LC(E)
			&kp LG(A) 		&sk LALT  		&sk LSHIFT  	&sk LCMD  	&sk RCTRL  				&kp LC(W)	 	&kp LEFT  	&kp DOWN 	&kp UP   	&kp RIGHT
			&kp LG(Z)  		&kp LG(X) 		&kp LG(C) 		&kp LG(V)  	&kp DEL 	         	&kp BSPC	 	&none		&kp HOME    &kp END		&kp TAB 
															&trans 		&trans    				&kp ENTER  		&mo FNC
			>;
		};

		// Function keys with modifiers
		fnc_layer {
			label = "Fnc";
			bindings = <
			&kp F1 		&kp F2 		&kp F3 		&kp F4 		&kp F5                  				&kp F6 			&kp F7 				&kp F8 				&kp F9 				&kp F10 
			&sk LALT 	&sk LGUI 	&sk LSHIFT 	&sk LCTRL 	&kp RALT     							&kp F11 		&kp F12  			&kp LG(LA(C)) 		&kp LA(SPACE) 		&trans
			&bt BT_CLR	&none 		&none 		&none 		&bt BT_SEL 0				    		&bt BT_SEL 1 	&kp LC(LA(LEFT))	&kp LC(LA(ENTER)) 	&kp LC(LA(RIGHT)) 	&kp CAPS
							  					&none 		&none              						&none 	&none  
			>;
		};

		// Low frequency symbols.
		symbols_2_layer {
			label = "Sym 2";
			bindings = <
			&kp CARET 	&none		&kp RA(N3) 		&kp LS(RA(N2))  &kp HASH         		&kp K_VOL_DN 	&kp K_VOL_UP	&kp C_PREV 	&kp C_PP  	&kp C_NEXT 
			&none		&none  		&none		 	&none	 		&none          			&none 			&none 			&none 		&none 		&none
			&none 		&cp PERCENT &none 			&none 			&none				  	&none 			&none 			&none 		&none 		&none
													&none 			&none        			&none 			&none 
			>;
		};

		// // Used to type regional accents.
		// accent_layer {
		// 	label = "Accent";
		// 	bindings = <
		// 	&none &none &none &none &none       &none &none &none &none &none 
		// 	&none &none &none &none &none 		&none &none &none &none &none
		// 	&none &none &none &none &none       &none &none &none &none &none
		// 					  &none &none       &none &none 
		// 	>;
		// };

		// Used to change the keyboard's settings.
		settings_layer {
				label = "Sett.";
				bindings = <
				&bootloader &none &none &bt BT_CLR &bt BT_SEL 0               &bt BT_SEL 3 &none &unstick &none &bootloader 
				&none &none &none &none      &bt BT_SEL 1 						  &bt BT_SEL 4 &none &none &none &none
				&none &none &none &none      &bt BT_SEL 2               &bt BT_SEL 5 &none &none &none &none
										&none &none                         &none &none 
				>;
		};
	};
};
